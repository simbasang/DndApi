// <auto-generated />
using System;
using DndApi.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230210133435_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DndApi.Entitys.ArmorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("ArmorType")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Intelligens")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("DndApi.Entitys.ClassEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DndApi.Entitys.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChestId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FeetId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HandsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeadId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SholderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChestId")
                        .IsUnique();

                    b.HasIndex("FeetId")
                        .IsUnique();

                    b.HasIndex("HandsId")
                        .IsUnique();

                    b.HasIndex("HeadId")
                        .IsUnique();

                    b.HasIndex("LegsId")
                        .IsUnique();

                    b.HasIndex("SholderId")
                        .IsUnique();

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("DndApi.Entitys.JoinTables.PlayerSkillsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SkillId");

                    b.ToTable("PlayerSkills");
                });

            modelBuilder.Entity("DndApi.Entitys.PlayerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMana")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Intelligens")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("MaxMana")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RaceId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DndApi.Entitys.RaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DndApi.Entitys.SkillEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EffectAmount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SkillEfectType")
                        .HasColumnType("int");

                    b.Property<int>("SkillType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DndApi.Entitys.WeaponEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Intelligens")
                        .HasColumnType("int");

                    b.Property<bool>("IsTwoHanded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("DndApi.Entitys.EquipmentEntity", b =>
                {
                    b.HasOne("DndApi.Entitys.ArmorEntity", "Chest")
                        .WithOne()
                        .HasForeignKey("DndApi.Entitys.EquipmentEntity", "ChestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DndApi.Entitys.ArmorEntity", "Feet")
                        .WithOne()
                        .HasForeignKey("DndApi.Entitys.EquipmentEntity", "FeetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DndApi.Entitys.ArmorEntity", "Hands")
                        .WithOne()
                        .HasForeignKey("DndApi.Entitys.EquipmentEntity", "HandsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DndApi.Entitys.ArmorEntity", "Head")
                        .WithOne()
                        .HasForeignKey("DndApi.Entitys.EquipmentEntity", "HeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DndApi.Entitys.ArmorEntity", "Legs")
                        .WithOne()
                        .HasForeignKey("DndApi.Entitys.EquipmentEntity", "LegsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DndApi.Entitys.ArmorEntity", "Sholder")
                        .WithOne()
                        .HasForeignKey("DndApi.Entitys.EquipmentEntity", "SholderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chest");

                    b.Navigation("Feet");

                    b.Navigation("Hands");

                    b.Navigation("Head");

                    b.Navigation("Legs");

                    b.Navigation("Sholder");
                });

            modelBuilder.Entity("DndApi.Entitys.JoinTables.PlayerSkillsEntity", b =>
                {
                    b.HasOne("DndApi.Entitys.PlayerEntity", "Player")
                        .WithMany("Skills")
                        .HasForeignKey("PlayerId");

                    b.HasOne("DndApi.Entitys.SkillEntity", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.Navigation("Player");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DndApi.Entitys.PlayerEntity", b =>
                {
                    b.HasOne("DndApi.Entitys.ClassEntity", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("DndApi.Entitys.EquipmentEntity", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("DndApi.Entitys.RaceEntity", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.Navigation("Class");

                    b.Navigation("Equipment");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DndApi.Entitys.SkillEntity", b =>
                {
                    b.HasOne("DndApi.Entitys.ClassEntity", "Class")
                        .WithMany("Skills")
                        .HasForeignKey("ClassId");

                    b.HasOne("DndApi.Entitys.RaceEntity", "Race")
                        .WithMany("Skills")
                        .HasForeignKey("RaceId");

                    b.Navigation("Class");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DndApi.Entitys.ClassEntity", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("DndApi.Entitys.PlayerEntity", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("DndApi.Entitys.RaceEntity", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
